"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = combineRules;

var _cssInJsUtils = require("css-in-js-utils");

var _fastLoops = require("fast-loops");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function resolveRule(rule, props, renderer) {
  if (Array.isArray(rule)) {
    return resolveRule(combineRules.apply(void 0, _toConsumableArray(rule)), props, renderer);
  }

  if (typeof rule === 'function') {
    return rule(props, renderer);
  }

  return rule;
}

function combineRules() {
  for (var _len = arguments.length, rules = new Array(_len), _key = 0; _key < _len; _key++) {
    rules[_key] = arguments[_key];
  }

  // escape hatch to skip the object assignment for single rules
  if (rules.length === 1) {
    return function (props, renderer) {
      return resolveRule(rules[0], props, renderer);
    };
  }

  return function (props, renderer) {
    return (0, _fastLoops.arrayReduce)(rules, function (style, rule) {
      var resolvedRule = resolveRule(rule, props, renderer); // special combination of our special _className key

      if (resolvedRule && style._className) {
        resolvedRule._className = style._className + (resolvedRule._className ? ' ' + resolvedRule._className : '');
      }

      return (0, _cssInJsUtils.assignStyle)(style, resolvedRule);
    }, {});
  };
}
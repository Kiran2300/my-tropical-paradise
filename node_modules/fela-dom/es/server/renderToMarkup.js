function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { arrayReduce, objectReduce } from 'fast-loops';
import { clusterCache, cssifySupportRules, sheetMap, RULE_TYPE } from 'fela-utils';
import createStyleTagMarkup from './createStyleTagMarkup';
import getRehydrationIndex from './getRehydrationIndex';
export default function renderToMarkup(renderer) {
  var cacheCluster = clusterCache(renderer.cache, renderer.ruleOrder);
  var rehydrationIndex = getRehydrationIndex(renderer);
  var styleMarkup = objectReduce(sheetMap, function (markup, type, key) {
    if (cacheCluster[key].length > 0) {
      markup += createStyleTagMarkup(cacheCluster[key], type, '', rehydrationIndex, false, renderer.styleNodeAttributes);
    }

    return markup;
  }, '');
  var support = cssifySupportRules(cacheCluster.supportRules);

  if (support) {
    styleMarkup += createStyleTagMarkup(support, RULE_TYPE, '', rehydrationIndex, true, renderer.styleNodeAttributes);
  }

  var mediaKeys = Object.keys(_objectSpread(_objectSpread({}, cacheCluster.supportMediaRules), cacheCluster.mediaRules)).sort(renderer.sortMediaQuery);
  return arrayReduce(mediaKeys, function (markup, media) {
    // basic media query rules
    if (cacheCluster.mediaRules[media] && cacheCluster.mediaRules[media].length > 0) {
      markup += createStyleTagMarkup(cacheCluster.mediaRules[media], RULE_TYPE, media, rehydrationIndex, false, renderer.styleNodeAttributes);
    } // support media rules


    if (cacheCluster.supportMediaRules[media]) {
      var mediaSupport = cssifySupportRules(cacheCluster.supportMediaRules[media]);

      if (mediaSupport.length > 0) {
        markup += createStyleTagMarkup(mediaSupport, RULE_TYPE, media, rehydrationIndex, true, renderer.styleNodeAttributes);
      }
    }

    return markup;
  }, styleMarkup);
}
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var _excluded = ["extend", "_felaRules"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { objectReduce, objectEach } from 'fast-loops';
import { combineMultiRules } from 'fela-tools';
import shallowCompare from 'react-addons-shallow-compare';
import generateDisplayName from './generateDisplayName';
import generateSelectorPrefix from './generateSelectorPrefix';
import hoistStatics from './hoistStatics';
var defaultConfig = {
  pure: true
};
export default function connectFactory(BaseComponent, createElement, RendererContext, ThemeContext) {
  return function connect(rules) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var connectConfig = _objectSpread(_objectSpread({}, defaultConfig), config);

    return function (component) {
      var EnhancedComponent = /*#__PURE__*/function (_BaseComponent) {
        _inherits(EnhancedComponent, _BaseComponent);

        var _super = _createSuper(EnhancedComponent);

        function EnhancedComponent() {
          _classCallCheck(this, EnhancedComponent);

          return _super.apply(this, arguments);
        }

        _createClass(EnhancedComponent, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            if (connectConfig.pure) {
              return shallowCompare(this, nextProps, nextState);
            }

            return true;
          }
        }, {
          key: "render",
          value: function render() {
            var _this$props = this.props,
                extend = _this$props.extend,
                _felaRules = _this$props._felaRules,
                otherProps = _objectWithoutProperties(_this$props, _excluded);

            var allRules = [rules];

            if (_felaRules) {
              allRules.push(_felaRules);
            }

            if (extend) {
              allRules.push(extend);
            }

            var combinedRules = combineMultiRules.apply(void 0, allRules);
            return createElement(RendererContext.Consumer, undefined, function (renderer) {
              return createElement(ThemeContext.Consumer, undefined, function (theme) {
                var preparedRules = combinedRules(_objectSpread(_objectSpread({}, otherProps), {}, {
                  theme: theme
                }), renderer); // improve developer experience with monolithic renderer

                if (process.env.NODE_ENV !== 'production' && renderer.prettySelectors) {
                  var componentName = component.displayName || component.name || '';
                  objectEach(preparedRules, function (rule, name) {
                    rule.selectorPrefix = generateSelectorPrefix(componentName, name);
                  });
                }

                if (component._isFelaComponent) {
                  return createElement(component, _objectSpread({
                    _felaRules: combinedRules
                  }, otherProps));
                }

                var styles = objectReduce(preparedRules, function (styleMap, rule, name) {
                  styleMap[name] = renderer.renderRule(rule, _objectSpread(_objectSpread({}, otherProps), {}, {
                    theme: theme
                  }));
                  return styleMap;
                }, {});
                var boundRules = objectReduce(preparedRules, function (ruleMap, rule, name) {
                  ruleMap[name] = function (props) {
                    return rule(_objectSpread({
                      theme: theme
                    }, props), renderer);
                  };

                  return ruleMap;
                }, {});
                return createElement(component, _objectSpread(_objectSpread({}, otherProps), {}, {
                  styles: styles,
                  theme: theme,
                  rules: boundRules
                }));
              });
            });
          }
        }]);

        return EnhancedComponent;
      }(BaseComponent);

      _defineProperty(EnhancedComponent, "displayName", generateDisplayName(component));

      _defineProperty(EnhancedComponent, "_isFelaComponent", true);

      return hoistStatics(EnhancedComponent, component);
    };
  };
}
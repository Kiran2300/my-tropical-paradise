function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { arrayEach } from 'fast-loops';
var basicStatics = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var mergableStatics = ['contextTypes', 'defaultProps'];
var blockedStatics = {
  childContextTypes: true,
  propTypes: true,
  getDerivedStateFromProps: true,
  contextType: true
};
export default function hoistStatics(target, source) {
  if (typeof source === 'string') {
    return target;
  }

  var statics = Object.getOwnPropertyNames(source).filter(function (property) {
    return !basicStatics[property];
  });
  arrayEach(statics, function (property) {
    if (!target.hasOwnProperty(property) && !blockedStatics[property]) {
      try {
        // Avoid failures from read-only properties
        var descriptor = Object.getOwnPropertyDescriptor(source, property);

        if (descriptor) {
          Object.defineProperty(target, property, descriptor);
        }
      } catch (e) {// TODO: warning
      }
    }
  });
  arrayEach(mergableStatics, function (property) {
    if (source[property]) {
      var targetStatics = target[property] || {};
      target[property] = _objectSpread(_objectSpread({}, source[property]), targetStatics);
    }
  });
  return target;
}
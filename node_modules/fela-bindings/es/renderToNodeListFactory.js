function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { renderToSheetList } from 'fela-dom';
export default function renderToNodeListFactory(createElement) {
  return function renderToNodeList(renderer) {
    var sheetList = renderToSheetList(renderer);
    return sheetList.map(function (_ref) {
      var type = _ref.type,
          media = _ref.media,
          rehydration = _ref.rehydration,
          support = _ref.support,
          css = _ref.css;
      return createElement('style', _objectSpread(_objectSpread({
        key: type + media
      }, renderer.styleNodeAttributes), {}, {
        media: media,
        'data-fela-rehydration': rehydration,
        'data-fela-type': type,
        'data-fela-support': support,
        dangerouslySetInnerHTML: {
          __html: css
        }
      }));
    });
  };
}
var _excluded = ["children", "_felaRule", "extend", "innerRef", "id", "style", "as", "className", "passThrough"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { combineRules } from 'fela';
import hoistStatics from './hoistStatics';
import extractPassThroughProps from './extractPassThroughProps';
import extractUsedProps from './extractUsedProps';
import generateSelectorPrefix from './generateSelectorPrefix';
import resolvePassThrough from './resolvePassThrough';
import resolveUsedProps from './resolveUsedProps';
export default function createComponentFactory(createElement, RendererContext, FelaTheme) {
  var withProxy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var alwaysPassThroughProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  return function createComponent(rule) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';
    var passThroughProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var displayName = rule.name ? rule.name : 'FelaComponent';

    var FelaComponent = function FelaComponent(_ref) {
      var children = _ref.children,
          _felaRule = _ref._felaRule,
          extend = _ref.extend,
          innerRef = _ref.innerRef,
          id = _ref.id,
          style = _ref.style,
          as = _ref.as,
          className = _ref.className,
          _ref$passThrough = _ref.passThrough,
          passThrough = _ref$passThrough === void 0 ? [] : _ref$passThrough,
          otherProps = _objectWithoutProperties(_ref, _excluded);

      var renderFn = function renderFn(renderer) {
        return createElement(FelaTheme, undefined, function (_felaTheme) {
          if (!renderer) {
            throw new Error("createComponent() can't render styles without the renderer in the context. Missing react-fela's <Provider /> at the app root?");
          }

          var usedProps = withProxy ? extractUsedProps(rule, _felaTheme) : [];
          var rules = [rule];

          if (_felaRule) {
            rules.push(_felaRule);
          }

          if (extend) {
            if (typeof extend === 'function') {
              rules.push(extend);
            } else {
              rules.push(function () {
                return extend;
              });
            }
          }

          var combinedRule = combineRules.apply(void 0, rules); // improve developer experience with monolithic renderer

          if (process.env.NODE_ENV !== 'production' && renderer.prettySelectors) {
            var componentName = typeof type === 'string' ? displayName : type.displayName || type.name || '';
            combinedRule.selectorPrefix = generateSelectorPrefix(componentName);
          } // compose passThrough props from arrays or functions


          var resolvedPassThrough = [].concat(_toConsumableArray(alwaysPassThroughProps), _toConsumableArray(resolvePassThrough(passThroughProps, otherProps)), _toConsumableArray(resolvePassThrough(passThrough, otherProps)), _toConsumableArray(withProxy ? resolveUsedProps(usedProps, otherProps) : []));

          var ruleProps = _objectSpread(_objectSpread({}, otherProps), {}, {
            theme: _felaTheme,
            as: as,
            id: id
          }); // if the component renders into another Fela component
          // we pass down the combinedRule as well as both


          if (type._isFelaComponent) {
            return createElement(type, _objectSpread({
              _felaRule: combinedRule,
              passThrough: resolvedPassThrough,
              innerRef: innerRef,
              style: style,
              className: className,
              as: as,
              id: id
            }, otherProps), children);
          }

          var componentProps = extractPassThroughProps(resolvedPassThrough, otherProps); // fela-native support

          if (renderer.isNativeRenderer) {
            var felaStyle = renderer.renderRule(combinedRule, ruleProps);
            componentProps.style = style ? [style, felaStyle] : felaStyle;
          } else {
            if (style) {
              componentProps.style = style;
            }

            var cls = className ? "".concat(className, " ") : '';
            componentProps.className = cls + renderer.renderRule(combinedRule, ruleProps);
          }

          if (id) {
            componentProps.id = id;
          }

          if (innerRef) {
            componentProps.ref = innerRef;
          }

          var customType = as || type;
          return createElement(customType, componentProps, children);
        });
      };

      return createElement(RendererContext.Consumer, undefined, renderFn);
    }; // use the rule name as display name to better debug with react inspector


    FelaComponent.displayName = displayName;
    FelaComponent._isFelaComponent = true;
    return hoistStatics(FelaComponent, type);
  };
}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = useFelaFactory;

var _fela = require("fela");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getPropsWithTheme(props, theme) {
  if (props) {
    return _objectSpread(_objectSpread({}, props), {}, {
      theme: theme
    });
  }

  return {
    theme: theme
  };
}

function useFelaFactory(RendererContext, ThemeContext, useContext) {
  return function useFela(props) {
    var renderer = useContext(RendererContext);
    var theme = useContext(ThemeContext) || {};

    if (!renderer) {
      throw new Error('The "useFela" hook can only be used inside a "RendererProvider"');
    } // we add the theme to props so that it can be used within styles


    var propsWithTheme = getPropsWithTheme(props, theme);

    function css() {
      return renderer.renderRule(_fela.combineRules.apply(void 0, arguments), propsWithTheme);
    }

    function staticStyle(style, selector) {
      return renderer.renderStatic(style, selector, propsWithTheme);
    }

    return {
      renderer: renderer,
      theme: theme,
      css: css,
      staticStyle: staticStyle
    };
  };
}
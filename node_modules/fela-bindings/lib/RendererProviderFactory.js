"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = RendererProviderFactory;

var _felaDom = require("fela-dom");

var _fastLoops = require("fast-loops");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function hasDOM(renderer, targetDocument) {
  // ensure we're on a browser by using document since window is defined in e.g. React Native
  // see https://github.com/robinweser/fela/issues/736
  if (typeof document === 'undefined') {
    return false;
  }

  var doc = targetDocument || document;
  return renderer && !renderer.isNativeRenderer && doc && doc.createElement;
}

function hasServerRenderedStyle() {
  var targetDocument = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;
  return targetDocument.querySelectorAll('[data-fela-type]').length > 0;
}

function RendererProviderFactory(BaseComponent, RendererContext, createElement, renderChildren, statics) {
  var RendererProvider = /*#__PURE__*/function (_BaseComponent) {
    _inherits(RendererProvider, _BaseComponent);

    var _super = _createSuper(RendererProvider);

    function RendererProvider(props, context) {
      var _this;

      _classCallCheck(this, RendererProvider);

      _this = _super.call(this, props, context);

      _this._renderStyle();

      return _this;
    }

    _createClass(RendererProvider, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.renderer !== this.props.renderer) {
          // add warning that renderer is changed
          this._renderStyle();
        }
      }
    }, {
      key: "_renderStyle",
      value: function _renderStyle() {
        var _this$props = this.props,
            renderer = _this$props.renderer,
            shouldRehydrate = _this$props.rehydrate,
            targetDocument = _this$props.targetDocument;

        if (hasDOM(renderer, targetDocument)) {
          if (shouldRehydrate && hasServerRenderedStyle(targetDocument)) {
            (0, _felaDom.rehydrate)(renderer, targetDocument);
          } else {
            (0, _felaDom.render)(renderer, targetDocument);
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        return createElement(RendererContext.Provider, {
          value: this.props.renderer
        }, renderChildren(this.props.children));
      }
    }]);

    return RendererProvider;
  }(BaseComponent);

  if (statics) {
    (0, _fastLoops.objectEach)(statics, function (value, key) {
      RendererProvider[key] = value;
    });
  }

  return RendererProvider;
}
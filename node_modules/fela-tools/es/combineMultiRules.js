function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { objectReduce, arrayReduce } from 'fast-loops';
import { combineRules } from 'fela';

function safeRule(ruleOrObject) {
  return typeof ruleOrObject === 'function' ? ruleOrObject : function () {
    return ruleOrObject;
  };
}

export default function combineMultiRules() {
  for (var _len = arguments.length, multiRules = new Array(_len), _key = 0; _key < _len; _key++) {
    multiRules[_key] = arguments[_key];
  }

  return function (props, renderer) {
    return arrayReduce(multiRules, function (resultStyleMap, multiRule) {
      return _objectSpread(_objectSpread({}, resultStyleMap), objectReduce(safeRule(multiRule)(props, renderer), function (styleMap, rule, name) {
        return _objectSpread(_objectSpread({}, styleMap), {}, _defineProperty({}, name, resultStyleMap[name] ? combineRules(resultStyleMap[name], safeRule(rule)) : safeRule(rule)));
      }, {}));
    }, {});
  };
}